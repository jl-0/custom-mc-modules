name: Generate and Deploy Documentation

on:
  push:
    branches: [ main ]
    paths:
      - 'modules/**'
      - 'module-registry.json'
      - '.github/workflows/docs.yml'
      - 'docs/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'modules/**'
      - 'module-registry.json'
      - '.github/workflows/docs.yml'
      - 'docs/**'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  generate-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Install terraform-docs
        run: |
          curl -sSLo ./terraform-docs.tar.gz https://terraform-docs.io/dl/v0.16.0/terraform-docs-v0.16.0-$(uname)-amd64.tar.gz
          tar -xzf terraform-docs.tar.gz
          chmod +x terraform-docs
          sudo mv terraform-docs /usr/local/bin/

      - name: Generate module documentation
        run: |
          mkdir -p docs/static/modules
          for module_dir in modules/*/; do
            module_name=$(basename "$module_dir")
            echo "Generating docs for $module_name"
            
            # Generate terraform-docs
            terraform-docs markdown table "$module_dir" > "docs/static/modules/${module_name}.md"
            
            # Generate JSON metadata for the website
            terraform-docs json "$module_dir" > "docs/static/modules/${module_name}.json"
          done

      - name: Validate module registry
        run: |
          # Validate JSON syntax
          python3 -m json.tool module-registry.json > /dev/null
          echo "Module registry JSON is valid"

      - name: Install documentation dependencies
        run: |
          cd docs
          npm install

      - name: Build documentation site
        run: |
          cd docs
          npm run build
        env:
          NODE_ENV: production

      - name: Upload documentation artifacts
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/dist

  deploy-docs:
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: generate-docs
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  validate-modules:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        module:
          - s3
          - vpc
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Terraform Format Check
        run: |
          cd modules/${{ matrix.module }}
          terraform fmt -check -diff -recursive
        continue-on-error: false

      - name: Terraform Init
        run: |
          cd modules/${{ matrix.module }}
          terraform init -backend=false

      - name: Terraform Validate
        run: |
          cd modules/${{ matrix.module }}
          terraform validate

      - name: TFLint Setup
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.47.0

      - name: TFLint Init
        run: |
          cd modules/${{ matrix.module }}
          tflint --init

      - name: TFLint Run
        run: |
          cd modules/${{ matrix.module }}
          tflint --format compact
        continue-on-error: true

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: 'modules'
          format: 'table'
          exit-code: '0'  # Don't fail the build on vulnerabilities

      - name: Run Checkov scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: modules
          framework: terraform
          output_format: cli
          soft_fail: true  # Don't fail the build on policy violations

  test-examples:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-west-2

      - name: Test module examples
        run: |
          cd examples
          for example_dir in */; do
            if [ -f "$example_dir/main.tf" ]; then
              echo "Testing example: $example_dir"
              cd "$example_dir"
              terraform init
              terraform plan -detailed-exitcode
              cd ..
            fi
          done

  validate-registry:
    runs-on: ubuntu-latest
    needs: [validate-modules, security-scan]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate module registry
        run: |
          echo "🔍 Validating module-registry.json..."
          
          # Check JSON syntax
          if ! jq empty module-registry.json; then
            echo "❌ Invalid JSON syntax"
            exit 1
          fi
          echo "✅ JSON syntax is valid"
          
          # Check that referenced modules exist
          echo "📦 Checking referenced modules..."
          for module in $(jq -r '.modules | keys[]' module-registry.json); do
            # Extract actual module directory name from the module key
            module_dir=$(echo "$module" | sed 's/unity-//')
            if [ -d "modules/$module_dir" ] && [ -f "modules/$module_dir/main.tf" ]; then
              echo "✅ Module $module exists (modules/$module_dir)"
            else
              echo "⚠️  Module $module referenced but modules/$module_dir not found or incomplete"
            fi
          done
          
          # Check for orphaned modules (exist but not in registry)
          echo "🔍 Checking for unregistered modules..."
          for dir in modules/*/; do
            if [ -f "$dir/main.tf" ]; then
              module_name=$(basename "$dir")
              if jq -e ".modules[\"unity-$module_name\"]" module-registry.json > /dev/null; then
                echo "✅ Module $module_name is registered"
              else
                echo "⚠️  Module $module_name exists but not registered in module-registry.json"
              fi
            fi
          done
          
          # Validate required fields
          echo "📋 Validating required fields..."
          required_fields=".version .metadata .modules"
          for field in $required_fields; do
            if jq -e "$field" module-registry.json > /dev/null; then
              echo "✅ Required field $field present"
            else
              echo "❌ Missing required field: $field"
              exit 1
            fi
          done
          
          echo "✅ Module registry validation completed"

