name: Generate and Deploy Documentation

on:
  push:
    branches: [ main ]
    paths:
      - 'modules/**'
      - 'module-registry.json'
      - '.github/workflows/docs.yml'
      - 'docs/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'modules/**'
      - 'module-registry.json'
      - '.github/workflows/docs.yml'
      - 'docs/**'
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  generate-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Install terraform-docs
        run: |
          curl -sSLo ./terraform-docs.tar.gz https://terraform-docs.io/dl/v0.16.0/terraform-docs-v0.16.0-$(uname)-amd64.tar.gz
          tar -xzf terraform-docs.tar.gz
          chmod +x terraform-docs
          sudo mv terraform-docs /usr/local/bin/

      - name: Generate module documentation
        run: |
          mkdir -p docs/static/modules
          for module_dir in modules/*/; do
            module_name=$(basename "$module_dir")
            echo "Generating docs for $module_name"
            
            # Generate terraform-docs
            terraform-docs markdown table "$module_dir" > "docs/static/modules/${module_name}.md"
            
            # Generate JSON metadata for the website
            terraform-docs json "$module_dir" > "docs/static/modules/${module_name}.json"
          done

      - name: Generate LLM-friendly documentation
        run: |
          echo "Generating LLM documentation from module registry..."
          
          # Create the LLM documentation markdown file
          cat > docs/llm-documentation.md << 'EOF'
          # Unity Terraform Modules - LLM Documentation

          This documentation is optimized for Large Language Models (LLMs) to understand and work with Unity Terraform modules.

          ## Quick Reference

          **Repository:** $(jq -r '.metadata.repository' module-registry.json)
          **Last Updated:** $(jq -r '.metadata.last_updated' module-registry.json)
          **Documentation URL:** https://jl-0.github.io/custom-mc-modules

          ## Available Modules

          EOF
          
          # Generate documentation for each module
          for module_key in $(jq -r '.modules | keys[]' module-registry.json); do
            echo "Generating docs for module: $module_key"
            
            # Extract module data
            description=$(jq -r ".modules[\"$module_key\"].description" module-registry.json)
            source=$(jq -r ".modules[\"$module_key\"].source" module-registry.json)
            # Extract category from module key prefix (infrastructure-, networking-, etc.)
            category=$(echo "$module_key" | sed 's/-.*$//')
            # Use provider as tag if no tags field exists
            provider=$(jq -r ".modules[\"$module_key\"].provider // \"aws\"" module-registry.json)
            tags="$provider, terraform"
            
            cat >> docs/llm-documentation.md << EOF
          ### $module_key

          **Description:** $description

          **Source:** \`$source\`

          **Category:** $category

          **Tags:** $tags

          **Usage Example:**
          \`\`\`hcl
          module "${module_key/unity-/}_example" {
            source = "$source?ref=main"
            
          EOF
            
            # Add required inputs as example
            jq -r ".modules[\"$module_key\"].inputs | to_entries[] | select(.value.required == true) | \"  \" + .key + \" = \\\"example-value\\\"\"" module-registry.json >> docs/llm-documentation.md
            
            cat >> docs/llm-documentation.md << EOF
          }
          \`\`\`

          **Required Inputs:**
          EOF
            
            # Add required inputs documentation
            jq -r ".modules[\"$module_key\"].inputs | to_entries[] | select(.value.required == true) | \"- \`\" + .key + \"\` (\" + .value.type + \"): \" + .value.description" module-registry.json >> docs/llm-documentation.md
            
            cat >> docs/llm-documentation.md << EOF

          **Optional Inputs:**
          EOF
            
            # Add optional inputs documentation
            jq -r ".modules[\"$module_key\"].inputs | to_entries[] | select(.value.required != true) | \"- \`\" + .key + \"\` (\" + .value.type + \"): \" + .value.description + (if .value.default != null then \" (default: \`\" + (.value.default | tostring) + \"\`)\" else \"\" end)" module-registry.json >> docs/llm-documentation.md
            
            cat >> docs/llm-documentation.md << EOF

          **Outputs:**
          EOF
            
            # Add outputs documentation
            jq -r ".modules[\"$module_key\"].outputs | to_entries[] | \"- \`\" + .key + \"\`: \" + (.value.description // .value)" module-registry.json >> docs/llm-documentation.md
            
            echo -e "\n---\n" >> docs/llm-documentation.md
          done
          
          # Add integration patterns and guidelines
          cat >> docs/llm-documentation.md << 'EOF'
          ## Integration Patterns

          ### Basic Infrastructure Setup
          ```hcl
          # Complete infrastructure with VPC and S3
          module "vpc" {
            source = "github.com/jl-0/custom-mc-modules//modules/vpc?ref=main"
            
            vpc_cidr           = "10.0.0.0/16"
            name_prefix        = "my-app"
            availability_zones = ["us-west-2a", "us-west-2b"]
          }

          module "data_bucket" {
            source = "github.com/jl-0/custom-mc-modules//modules/s3?ref=main"
            
            bucket_name = "my-app-data-bucket"
            environment = "prod"
          }
          ```

          ### Variable References Between Modules
          ```hcl
          # Use VPC outputs in other modules
          module "vpc" {
            source = "github.com/jl-0/custom-mc-modules//modules/vpc?ref=main"
            # ... configuration
          }

          # Reference VPC outputs (for future RDS module)
          # vpc_id = module.vpc.vpc_id
          # subnet_ids = module.vpc.private_subnet_ids
          ```

          ## LLM Implementation Guidelines

          When helping users implement these modules:

          1. **Always use the latest source reference:** `?ref=main`
          2. **Include required inputs:** Check the Required Inputs section for each module
          3. **Suggest appropriate defaults:** Use the documented defaults for optional inputs
          4. **Consider dependencies:** VPC should be created before other networking-dependent resources
          5. **Follow naming conventions:** Use consistent prefixes and environments
          6. **Add appropriate tags:** Include environment, project, and purpose tags

          ## Common Use Cases

          ### Development Environment
          - Use smaller instance types and simplified configurations
          - Enable development-friendly settings
          - Use `environment = "dev"`

          ### Production Environment  
          - Enable all security features
          - Use production-grade instance types
          - Enable monitoring and logging
          - Use `environment = "prod"`

          ### Data Processing Pipeline
          - S3 bucket for data storage with lifecycle rules
          - VPC with private subnets for compute resources
          - Enable standard Unity lifecycle management

          ## Access Methods

          - **Interactive Copy:** Visit https://jl-0.github.io/custom-mc-modules/#llm-docs
          - **Direct Access:** https://raw.githubusercontent.com/jl-0/custom-mc-modules/main/docs/llm-documentation.md
          - **Module Registry JSON:** https://raw.githubusercontent.com/jl-0/custom-mc-modules/main/module-registry.json
          EOF
          
          echo "✅ Generated docs/llm-documentation.md"

      - name: Commit generated LLM documentation
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Check if there are changes to commit
          if [[ -n $(git status --porcelain docs/llm-documentation.md) ]]; then
            git add docs/llm-documentation.md
            git commit -m "Update LLM documentation
            
            🤖 Generated with [Claude Code](https://claude.ai/code)
            
            Co-Authored-By: Claude <noreply@anthropic.com>"
            git push
            echo "✅ LLM documentation updated and committed"
          else
            echo "ℹ️ No changes to LLM documentation"
          fi

      - name: Validate module registry
        run: |
          # Validate JSON syntax
          python3 -m json.tool module-registry.json > /dev/null
          echo "Module registry JSON is valid"

      - name: Install documentation dependencies
        run: |
          cd docs
          npm install

      - name: Build documentation site
        run: |
          cd docs
          npm run build
        env:
          NODE_ENV: production

      - name: Upload documentation artifacts
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs

  deploy-docs:
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: generate-docs
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  validate-modules:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        module:
          - s3
          - vpc
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Terraform Format Check
        run: |
          cd modules/${{ matrix.module }}
          terraform fmt -check -diff -recursive
        continue-on-error: false

      - name: Terraform Init
        run: |
          cd modules/${{ matrix.module }}
          terraform init -backend=false

      - name: Terraform Validate
        run: |
          cd modules/${{ matrix.module }}
          terraform validate

      - name: TFLint Setup
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.47.0

      - name: TFLint Init
        run: |
          cd modules/${{ matrix.module }}
          tflint --init

      - name: TFLint Run
        run: |
          cd modules/${{ matrix.module }}
          tflint --format compact
        continue-on-error: true

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: 'modules'
          format: 'table'
          exit-code: '0'  # Don't fail the build on vulnerabilities

      - name: Run Checkov scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: modules
          framework: terraform
          output_format: cli
          soft_fail: true  # Don't fail the build on policy violations

  test-examples:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-west-2

      - name: Test module examples
        run: |
          cd examples
          for example_dir in */; do
            if [ -f "$example_dir/main.tf" ]; then
              echo "Testing example: $example_dir"
              cd "$example_dir"
              terraform init
              terraform plan -detailed-exitcode
              cd ..
            fi
          done

  validate-registry:
    runs-on: ubuntu-latest
    needs: [validate-modules, security-scan]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate module registry
        run: |
          echo "🔍 Validating module-registry.json..."
          
          # Check JSON syntax
          if ! jq empty module-registry.json; then
            echo "❌ Invalid JSON syntax"
            exit 1
          fi
          echo "✅ JSON syntax is valid"
          
          # Check that referenced modules exist
          echo "📦 Checking referenced modules..."
          for module in $(jq -r '.modules | keys[]' module-registry.json); do
            # Extract actual module directory name from the module key
            # Remove any prefix before the module name (e.g., infrastructure-s3 -> s3)
            module_dir=$(echo "$module" | sed 's/^[^-]*-//')
            if [ -d "modules/$module_dir" ] && [ -f "modules/$module_dir/main.tf" ]; then
              echo "✅ Module $module exists (modules/$module_dir)"
            else
              echo "⚠️  Module $module referenced but modules/$module_dir not found or incomplete"
            fi
          done
          
          # Check for orphaned modules (exist but not in registry)
          echo "🔍 Checking for unregistered modules..."
          for dir in modules/*/; do
            if [ -f "$dir/main.tf" ]; then
              module_name=$(basename "$dir")
              # Check if module exists with any prefix (infrastructure-, etc.)
              module_found=false
              for registered_module in $(jq -r '.modules | keys[]' module-registry.json); do
                if [[ "$registered_module" == *"-$module_name" ]]; then
                  module_found=true
                  break
                fi
              done
              if [ "$module_found" = true ]; then
                echo "✅ Module $module_name is registered"
              else
                echo "⚠️  Module $module_name exists but not registered in module-registry.json"
              fi
            fi
          done
          
          # Validate required fields
          echo "📋 Validating required fields..."
          required_fields=".version .metadata .modules"
          for field in $required_fields; do
            if jq -e "$field" module-registry.json > /dev/null; then
              echo "✅ Required field $field present"
            else
              echo "❌ Missing required field: $field"
              exit 1
            fi
          done
          
          echo "✅ Module registry validation completed"

