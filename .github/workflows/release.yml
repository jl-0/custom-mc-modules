name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Install terraform-docs
        run: |
          curl -sSLo ./terraform-docs.tar.gz https://terraform-docs.io/dl/v0.16.0/terraform-docs-v0.16.0-$(uname)-amd64.tar.gz
          tar -xzf terraform-docs.tar.gz
          chmod +x terraform-docs
          sudo mv terraform-docs /usr/local/bin/

      - name: Generate release documentation
        run: |
          mkdir -p release-docs
          
          # Generate documentation for each module
          for module_dir in modules/*/; do
            module_name=$(basename "$module_dir")
            echo "# $module_name Module" > "release-docs/${module_name}.md"
            echo "" >> "release-docs/${module_name}.md"
            terraform-docs markdown table "$module_dir" >> "release-docs/${module_name}.md"
          done
          
          # Create combined documentation
          cat > release-docs/README.md << 'EOF'
          # Unity Terraform Modules Release
          
          This release contains the following modules:
          
          EOF
          
          for module_dir in modules/*/; do
            module_name=$(basename "$module_dir")
            echo "- [$module_name](${module_name}.md)" >> release-docs/README.md
          done

      - name: Get version from tag
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Update module registry for release
        run: |
          version="${{ steps.version.outputs.version }}"
          timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          
          # Update module registry with new version
          jq --arg version "$version" --arg timestamp "$timestamp" '
            .metadata.last_updated = $timestamp |
            .modules[].versions[$version] = {
              "ref": $version,
              "terraform_version": ">= 1.0",
              "providers": {
                "aws": ">= 4.0"
              },
              "changelog": "Release " + $version
            }
          ' module-registry.json > temp-registry.json
          
          mv temp-registry.json module-registry.json

      - name: Generate changelog
        id: changelog
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            CHANGES=$(git log --pretty=format:"* %s" --no-merges)
          else
            CHANGES=$(git log --pretty=format:"* %s" --no-merges $LAST_TAG..HEAD)
          fi
          
          # Create changelog
          cat > CHANGELOG.md << EOF
          ## What's Changed
          
          $CHANGES
          
          ## Module Documentation
          
          - [Module Registry](module-registry.json)
          - [Documentation Website](https://unity-sds.github.io/unity-terraform-modules)
          
          ## Usage
          
          \`\`\`hcl
          module "example" {
            source = "github.com/unity-sds/unity-terraform-modules//modules/s3?ref=${{ steps.version.outputs.version }}"
            
            bucket_name = "my-unity-bucket"
            environment = "prod"
          }
          \`\`\`
          
          ## Modules Included
          
          EOF
          
          for module_dir in modules/*/; do
            module_name=$(basename "$module_dir")
            echo "- **$module_name**: $(head -1 "$module_dir/README.md" | sed 's/# //')" >> CHANGELOG.md
          done
          
          # Set output for GitHub release
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create archive
        run: |
          # Create release archive
          tar -czf unity-terraform-modules-${{ steps.version.outputs.version }}.tar.gz \
            modules/ \
            module-registry.json \
            README.md \
            LICENSE \
            examples/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Unity Terraform Modules ${{ steps.version.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          files: |
            unity-terraform-modules-${{ steps.version.outputs.version }}.tar.gz
            module-registry.json
            release-docs/*.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update latest tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -f latest
          git push origin latest --force

  update-management-console:
    runs-on: ubuntu-latest
    needs: release
    if: success()
    steps:
      - name: Trigger management console update
        run: |
          # This would trigger an update in the Unity Management Console
          # to refresh its module registry cache
          echo "Release ${{ github.ref_name }} completed"
          echo "Module registry updated with new version"
          
          # In a real scenario, this could:
          # 1. Send a webhook to management console instances
          # 2. Update a shared registry endpoint
          # 3. Trigger cache invalidation
          
          curl -X POST "https://api.github.com/repos/unity-sds/unity-management-console/dispatches" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.DISPATCH_TOKEN || secrets.GITHUB_TOKEN }}" \
            -d '{"event_type":"module-registry-updated","client_payload":{"version":"${{ github.ref_name }}","registry_url":"https://raw.githubusercontent.com/unity-sds/unity-terraform-modules/main/module-registry.json"}}' \
            || echo "Could not trigger management console update (this is optional)"