{
  "version": "1.0",
  "metadata": {
    "name": "Unity Marketplace Modules",
    "description": "Terraform modules optimized for Unity marketplace applications",
    "last_updated": "2025-07-01T10:00:00Z"
  },
  "modules": {
    "unity-s3": {
      "description": "Unity S3 bucket with standard configurations for secure, scalable storage",
      "source": "github.com/unity-sds/unity-terraform-modules//modules/s3",
      "documentation": "https://github.com/unity-sds/unity-terraform-modules/tree/main/modules/s3",
      "versions": {
        "1.0.0": {
          "ref": "v1.0.0",
          "terraform_version": ">= 1.0",
          "providers": {
            "aws": ">= 4.0"
          }
        },
        "latest": {
          "ref": "main",
          "terraform_version": ">= 1.0",
          "providers": {
            "aws": ">= 4.0"
          }
        }
      },
      "inputs": {
        "bucket_name": {
          "description": "Name of the S3 bucket (must be globally unique)",
          "type": "string",
          "required": true
        },
        "environment": {
          "description": "Environment name (e.g., dev, staging, prod)",
          "type": "string",
          "default": "dev"
        },
        "project": {
          "description": "Project name for resource tagging",
          "type": "string",
          "default": "unity"
        },
        "versioning_enabled": {
          "description": "Enable versioning on the bucket",
          "type": "bool",
          "default": true
        },
        "encryption_enabled": {
          "description": "Enable server-side encryption",
          "type": "bool",
          "default": true
        },
        "kms_key_id": {
          "description": "KMS key ID for encryption (if null, uses AES256)",
          "type": "string",
          "required": false
        },
        "block_public_access": {
          "description": "Block all public access to the bucket",
          "type": "bool",
          "default": true
        },
        "force_destroy": {
          "description": "Allow the bucket to be destroyed even if it contains objects",
          "type": "bool",
          "default": false
        },
        "lifecycle_rules": {
          "description": "List of lifecycle rules for cost optimization",
          "type": "list(object)",
          "required": false
        },
        "cors_rules": {
          "description": "List of CORS rules for web access",
          "type": "list(object)",
          "required": false
        },
        "notifications": {
          "description": "Map of S3 bucket notifications (lambda, sns, sqs)",
          "type": "map(object)",
          "required": false
        },
        "logging_enabled": {
          "description": "Enable access logging for audit purposes",
          "type": "bool",
          "default": false
        },
        "access_log_bucket": {
          "description": "Bucket to store access logs (if null, uses same bucket)",
          "type": "string",
          "required": false
        },
        "access_log_prefix": {
          "description": "Prefix for access log objects",
          "type": "string",
          "default": "access-logs/"
        },
        "bucket_policy": {
          "description": "IAM policy document to attach to the bucket",
          "type": "string",
          "required": false
        },
        "replication_configuration": {
          "description": "Cross-region replication configuration",
          "type": "object",
          "required": false
        },
        "enable_access_monitoring": {
          "description": "Enable CloudWatch monitoring for S3 access patterns",
          "type": "bool",
          "default": false
        },
        "tags": {
          "description": "Additional tags to apply to all resources",
          "type": "map(string)",
          "default": {}
        },
        "enable_standard_lifecycle": {
          "description": "Enable standard Unity lifecycle configuration",
          "type": "bool",
          "default": false
        },
        "standard_lifecycle_config": {
          "description": "Standard Unity lifecycle configuration settings",
          "type": "object",
          "default": {
            "transition_to_ia_days": 30,
            "transition_to_glacier_days": 90,
            "expire_days": 365,
            "expire_noncurrent_days": 30
          }
        },
        "website_configuration": {
          "description": "Website hosting configuration for static sites",
          "type": "object",
          "required": false
        },
        "transfer_acceleration_enabled": {
          "description": "Enable transfer acceleration for faster uploads",
          "type": "bool",
          "default": false
        },
        "request_payer": {
          "description": "Who pays for S3 data transfer costs",
          "type": "string",
          "default": "BucketOwner"
        },
        "object_lock_configuration": {
          "description": "Object lock configuration for compliance",
          "type": "object",
          "required": false
        }
      },
      "outputs": {
        "bucket_id": "The name of the bucket",
        "bucket_arn": "The ARN of the bucket",
        "bucket_domain_name": "The bucket domain name",
        "bucket_regional_domain_name": "The bucket region-specific domain name",
        "bucket_hosted_zone_id": "The Route 53 Hosted Zone ID for this bucket's region",
        "bucket_region": "The AWS region this bucket resides in",
        "bucket_website_endpoint": "The website endpoint, if configured",
        "bucket_website_domain": "The domain of the website endpoint",
        "versioning_enabled": "Whether versioning is enabled on the bucket",
        "encryption_enabled": "Whether server-side encryption is enabled",
        "kms_key_id": "The KMS key ID used for encryption",
        "public_access_blocked": "Whether public access is blocked",
        "bucket_url_s3": "S3 protocol URL of the bucket",
        "console_url": "AWS Console URL for the bucket"
      }
    },
    "unity-vpc": {
      "description": "Standard Unity VPC with public/private subnets for network isolation",
      "source": "github.com/unity-sds/unity-terraform-modules//modules/vpc",
      "documentation": "https://github.com/unity-sds/unity-terraform-modules/tree/main/modules/vpc",
      "versions": {
        "1.0.0": {
          "ref": "v1.0.0",
          "terraform_version": ">= 1.0",
          "providers": {
            "aws": ">= 4.0"
          }
        },
        "1.1.0": {
          "ref": "v1.1.0",
          "terraform_version": ">= 1.0",
          "providers": {
            "aws": ">= 5.0"
          }
        },
        "latest": {
          "ref": "main",
          "terraform_version": ">= 1.0",
          "providers": {
            "aws": ">= 4.0"
          }
        }
      },
      "inputs": {
        "vpc_cidr": {
          "description": "CIDR block for the VPC",
          "type": "string",
          "required": true
        },
        "name_prefix": {
          "description": "Name prefix for all resources",
          "type": "string",
          "required": true
        },
        "availability_zones": {
          "description": "List of availability zones for subnets",
          "type": "list(string)",
          "required": true
        },
        "enable_nat_gateway": {
          "description": "Enable NAT Gateway for private subnets",
          "type": "bool",
          "default": true
        },
        "enable_vpn_gateway": {
          "description": "Enable VPN Gateway for hybrid connectivity",
          "type": "bool",
          "default": false
        }
      },
      "outputs": {
        "vpc_id": "The ID of the VPC",
        "public_subnet_ids": "List of public subnet IDs",
        "private_subnet_ids": "List of private subnet IDs",
        "nat_gateway_ids": "List of NAT Gateway IDs"
      }
    },
    "unity-rds": {
      "description": "Unity RDS PostgreSQL database instance with backup and monitoring",
      "source": "github.com/unity-sds/unity-terraform-modules//modules/rds",
      "documentation": "https://github.com/unity-sds/unity-terraform-modules/tree/main/modules/rds",
      "versions": {
        "1.0.0": {
          "ref": "v1.0.0",
          "terraform_version": ">= 1.0",
          "providers": {
            "aws": ">= 4.0"
          }
        },
        "latest": {
          "ref": "main",
          "terraform_version": ">= 1.0",
          "providers": {
            "aws": ">= 4.0"
          }
        }
      },
      "inputs": {
        "identifier": {
          "description": "The name of the RDS instance",
          "type": "string",
          "required": true
        },
        "engine_version": {
          "description": "PostgreSQL engine version",
          "type": "string",
          "default": "14.6"
        },
        "instance_class": {
          "description": "Instance type of the RDS instance",
          "type": "string",
          "default": "db.t3.micro"
        },
        "allocated_storage": {
          "description": "The allocated storage in gigabytes",
          "type": "number",
          "default": 20
        },
        "db_name": {
          "description": "The name of the database to create",
          "type": "string",
          "required": true
        },
        "username": {
          "description": "Username for the master DB user",
          "type": "string",
          "default": "admin"
        },
        "vpc_id": {
          "description": "VPC ID for the DB subnet group",
          "type": "string",
          "required": true
        },
        "subnet_ids": {
          "description": "List of subnet IDs for the DB subnet group",
          "type": "list(string)",
          "required": true
        }
      },
      "outputs": {
        "db_instance_endpoint": "The connection endpoint",
        "db_instance_id": "The RDS instance ID",
        "db_instance_port": "The database port"
      }
    }
  }
}